name: giap-web-ci

permissions:
  contents: read
  packages: read

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  buildConfiguration: Release
  solutionDirectory: ./DfE.GIAP.All

jobs:
  build_unittest:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build
        uses: ./.github/actions/build
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Run unit tests
        run: |
          for proj in $(find . -name '*.csproj' | grep -v 'IntegrationTests'); do
            dotnet test "$proj" --verbosity normal --collect:"XPlat Code Coverage" -p:CoverletOutputFormat=cobertura -p:CoverletOutput=./TestResults/
          done
        working-directory: ${{ env.solutionDirectory }}

      - name: Install ReportGenerator tool
        run: dotnet tool install --tool-path ./tools dotnet-reportgenerator-globaltool --version 4.5.8
        working-directory: ${{ env.solutionDirectory }}

      - name: Generate test coverage reports
        run: ./tools/reportgenerator "-reports:**/coverage.cobertura.xml" "-targetdir:./coverlet/reports" "-reporttypes:Cobertura" "-assemblyfilters:-DfE.GIAP.Web.Views;-DfE.GIAP.Service.Tests"
        working-directory: ${{ env.solutionDirectory }}

      - name: Upload test coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: ${{ env.solutionDirectory }}/coverlet/reports/Cobertura.xml

      - name: Run gulp
        run: |
          npm install -g gulp
          gulp default --gulpfile DfE.GIAP.Web/gulpfile.js --cwd DfE.GIAP.Web 
        working-directory: ${{ env.solutionDirectory }}
#    - name: Upload build artifact
#      uses: actions/upload-artifact@v4
#      with:
#        name: WebApp
#        path: WebApp.zip

      - name: Verify formatting
        run: dotnet format --include DfE.GIAP.Core/ DfE.GIAP.Core.UnitTests/ --verify-no-changes
        working-directory: ./DfE.GIAP.All

  integration_tests:
    runs-on: ubuntu-latest
    needs: build_unittest
    services:
      cosmosdb:
        image: mcr.microsoft.com/cosmosdb/linux/azure-cosmos-emulator:latest
        ports:
          - 8081:8081
          - 10250-10255:10250-10255
        env:
          AZURE_COSMOS_EMULATOR_PARTITION_COUNT: 5
          AZURE_COSMOS_EMULATOR_ENABLE_DATA_PERSISTENCE: true

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build
        uses: ./.github/actions/build
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install CosmosDb Emulator TLS certificate
        run: |
          retry_count=0
          max_retry_count=10
          until sudo curl --insecure --silent --fail --show-error "https://localhost:8081/_explorer/emulator.pem" --output "/usr/local/share/ca-certificates/cosmos-db-emulator.crt"; do
            if [ $retry_count -eq $max_retry_count ]; then
              echo "Failed to download certificate after $retry_count attempts."
              exit 1
            fi
            echo "Failed to download certificate. Retrying in 5 seconds..."
            sleep 5
            retry_count=$((retry_count+1))
          done
          sudo update-ca-certificates

      - name: Run Integration Tests
        run: dotnet test ./DfE.GIAP.All/DfE.GIAP.Core.IntegrationTests/DfE.GIAP.Core.IntegrationTests.csproj --no-build --verbosity normal

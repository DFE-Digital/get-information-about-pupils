name: giap-web-cicd

on:
  push:
    branches: [main]
    tags: ['v*']
  pull_request:
    branches: [main]

env:
  BUILD_CONFIGURATION: Release
  SOLUTION_DIRECTORY: DfE.GIAP.All
  JAVA_VERSION: '17'

jobs:
  lint:
    runs-on: ubuntu-latest

    permissions:
      contents: read  # Required to check out the code.
      packages: read  # Required to access the DfE-Digital NuGet feed.

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup .NET SDK from global.json
        uses: actions/setup-dotnet@v5

      - name: Add DfE-Digital GitHub NuGet Feed
        run: dotnet nuget add source --username USERNAME --password ${{ secrets.GITHUB_TOKEN }} --store-password-in-clear-text --name dfedigital "https://nuget.pkg.github.com/DFE-Digital/index.json"

      - name: Verify formatting
        run: dotnet format --include src/DfE.GIAP.Core/ tests/DfE.GIAP.Core.UnitTests/ tests/DfE.GIAP.Core.IntegrationTests/ tests/DfE.GIAP.SharedTests/ --verify-no-changes --verbosity detailed
        working-directory: ${{ env.SOLUTION_DIRECTORY }}

  build_unittest_package:
    runs-on: ubuntu-latest

    permissions:
      contents: read  # Required to check out the code.
      packages: read  # Required to access the DfEDigital NuGet feed.

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Build
        uses: ./.github/actions/build
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Run unit tests
        working-directory: ${{ env.SOLUTION_DIRECTORY }}
        shell: bash
        run: |

          for proj in \
            tests/DfE.GIAP.Common.Tests/DfE.GIAP.Common.Tests.csproj \
            tests/DfE.GIAP.Core.UnitTests/DfE.GIAP.Core.UnitTests.csproj \
            tests/DfE.GIAP.Service.Tests/DfE.GIAP.Service.Tests.csproj \
            tests/DfE.GIAP.Web.Tests/DfE.GIAP.Web.Tests.csproj
          do
            TEST_PROJECT=$(basename "$proj" .csproj)
            OUTPUT_REPORT_PATH="$(pwd)/coverlet/reports/$TEST_PROJECT/cobertura.xml"

            echo "Output path for coverage report is $OUTPUT_REPORT_PATH"
            echo "Running tests for $TEST_PROJECT..."

            dotnet test "$proj" \
              --no-build \
              --nologo \
              --logger "console;verbosity=detailed" \
              -p:CollectCoverage=true \
              -p:CoverletOutputFormat=cobertura \
              -p:CoverletOutput="$OUTPUT_REPORT_PATH"
          done

      - name: Merge coverage reports
        shell: bash
        run: | 
          dotnet tool run reportgenerator \
          -sourcedirs:"." \
          -reports:./DfE.GIAP.All/coverlet/reports/**/*cobertura.xml \
          -reporttypes:SonarQube -targetdir:./DfE.GIAP.All/coverlet/merged/ \
          -assemblyfilters:"-DfE.GIAP.Web.Views;-DfE.GIAP.Service.Tests" \

      - name: Upload unit test projects coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-coverage
          path: ${{ env.SOLUTION_DIRECTORY }}/coverlet/reports/*

      - name: Run gulp
        run: |
          npm install -g gulp
          gulp default --gulpfile src/DfE.GIAP.Web/gulpfile.js --cwd src/DfE.GIAP.Web
        working-directory: ${{ env.SOLUTION_DIRECTORY }}

      - name: Publish application
        run: dotnet publish src/DfE.GIAP.Web/DfE.GIAP.Web.csproj --configuration ${{ env.BUILD_CONFIGURATION }} --output ${{ github.workspace }}/publish
        working-directory: ${{ env.SOLUTION_DIRECTORY }}

      - name: Verify publish output
        run: ls -hal ${{ github.workspace }}/publish

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: packaged_app_for_deployment
          path: publish
          if-no-files-found: error

  local_integration_tests:
    runs-on: ubuntu-latest
    permissions:
      contents: read  # Required to check out the code.
      packages: read  # Required to access the DfEDigital NuGet feed.
      
    services:
      cosmosdb:
        image: mcr.microsoft.com/cosmosdb/linux/azure-cosmos-emulator:latest
        ports:
          - 8081:8081
          - 10250-10255:10250-10255
        env:
          AZURE_COSMOS_EMULATOR_PARTITION_COUNT: 5
          AZURE_COSMOS_EMULATOR_ENABLE_DATA_PERSISTENCE: true

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Build
        uses: ./.github/actions/build
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install CosmosDb Emulator TLS certificate
        run: |
          retry_count=0
          max_retry_count=10
          until sudo curl --insecure --silent --fail --show-error "https://localhost:8081/_explorer/emulator.pem" --output "/usr/local/share/ca-certificates/cosmos-db-emulator.crt"; do
            if [ $retry_count -eq $max_retry_count ]; then
              exit 1
            fi
            sleep 5
            retry_count=$((retry_count+1))
          done
          sudo update-ca-certificates

      - name: Run Integration Tests with Coverage
        working-directory: ${{ env.SOLUTION_DIRECTORY }}
        shell: bash
        run: |
          OUTPUT_REPORT_PATH="$(pwd)/coverlet/reports/DfE.GIAP.Core.IntegrationTests/cobertura.xml"
          echo "Output path for coverage report is $OUTPUT_REPORT_PATH"

          dotnet test "./tests/DfE.GIAP.Core.IntegrationTests/DfE.GIAP.Core.IntegrationTests.csproj" \
            --no-build \
            --nologo \
            --logger "console;verbosity=detailed" \
            -p:CollectCoverage=true \
            -p:CoverletOutputFormat=cobertura \
            -p:CoverletOutput="$OUTPUT_REPORT_PATH"

      - name: Upload integration test coverage report
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-coverage
          path: ${{ env.SOLUTION_DIRECTORY }}/coverlet/reports/DfE.GIAP.Core.IntegrationTests/cobertura.xml

  merge_coverage_reports:
    runs-on: ubuntu-latest
    needs: [build_unittest_package, local_integration_tests]
    permissions:
      contents: read  # Required to check out the code.

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Setup .NET SDK from global.json
        uses: actions/setup-dotnet@v5

      - name: Restore dotnet tools
        run: dotnet tool restore
        shell: bash

      - name: Download unit test coverage reports
        uses: actions/download-artifact@v5
        with:
          name: unit-test-coverage
          path: ./coverlet/reports

      - name: Download integration test coverage report
        uses: actions/download-artifact@v5
        with:
          name: integration-test-coverage
          path: ./coverlet/reports/DfE.GIAP.Core.IntegrationTests
          
      - name: Merge coverage reports
        run: |
          dotnet tool run reportgenerator \
            -sourcedirs:"." \
            -reports:./coverlet/reports/**/*.xml \
            -reporttypes:SonarQube \
            -targetdir:./coverlet/merged/ \
            -assemblyfilters:"-DfE.GIAP.Web.Views;-DfE.GIAP.Service.Tests" \

      - name: Upload merged coverage report
        uses: actions/upload-artifact@v4
        with:
          name: merged-coverage-report
          path: ./coverlet/merged/SonarQube.xml

  sonarcloud_scan:
    runs-on: ubuntu-latest
    needs: merge_coverage_reports

    permissions:
      contents: read  # Required to check out the code.
      packages: read  # Required to access the DfEDigital NuGet feed.

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0 # Fetches all history so SonarCloud can find the `main` branch

      - name: Download merged coverage report
        uses: actions/download-artifact@v5
        with:
          name: merged-coverage-report
          path: ${{ env.SOLUTION_DIRECTORY }}/coverlet/merged

      - name: Setup .NET SDK from global.json
        uses: actions/setup-dotnet@v5

      - name: Restore dotnet tools
        run: dotnet tool restore
        shell: bash

      - name: Setup Java ${{ env.JAVA_VERSION }} # for sonarcloud
        uses: actions/setup-java@v5
        with:
          distribution: "zulu"
          java-version: ${{ env.JAVA_VERSION }}

      - name: Begin SonarCloud analysis
        # TODO fix in https://github.com/DFE-Digital/get-information-about-pupils/issues/17#issuecomment-2994486283
        if: github.actor != 'dependabot[bot]'
        shell: bash
        run: |
          dotnet tool run dotnet-sonarscanner begin \
            /k:"DFE-Digital_get-information-about-pupils" \
            /o:"dfe-digital" \
            /d:sonar.token="${{ secrets.SONAR_TOKEN }}" \
            /d:sonar.host.url="https://sonarcloud.io" \
            /d:sonar.coverageReportPaths=${{ env.SOLUTION_DIRECTORY }}/coverlet/merged/SonarQube.xml \
            /d:sonar.coverage.exclusions=**/*.html,**/*.json,**/*.sql,**/*.js,**/*.ts,**/*.scss,**/wwwroot/**,**/Migrations/** \
            /d:sonar.exclusions=**/*.html,**/*.json,**/wwwroot/**,**/Migrations/**,**/bin/**,**/obj/** \
            /d:sonar.scanner.skipJreProvisioning=true \
            /d:sonar.scanner.scanAll=false \

      - name: Build
        uses: ./.github/actions/build
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: End SonarCloud Scanner
        # TODO fix in https://github.com/DFE-Digital/get-information-about-pupils/issues/17#issuecomment-2994486283
        if: ${{ github.actor != 'dependabot[bot]' && always() }}
        shell: bash
        run: dotnet tool run dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"


  ## Below are the "deployment" jobs.
  ## Notes:
  ## - Deployments are (currently) run only on pushes to the main branch, not PRs/tags/release branches.
  ## - These checks are done at the deployment job only - tests (smoke or otherwise) then depend on this deployment, therefore inherit the restrictions
  ## - Concurrency is defined per-environment (allows full deployment/test to complete, before allowing later queued runs to continue).
  ## - Permissions are explicit on each job, ensuring only the minimum required permissions are granted.
  ## - Smoke tests are deliberately extremely lightweight to check the app is deployed and running at all without signs of Azure errors (i.e., they do not check that it is running _correctly_).


  ####
  ## Development Environment
  ####
  deploy_development:
    needs: [build_unittest_package, lint, local_integration_tests]
    concurrency:
      group: deploy-and-test-dev
    permissions:
      contents: read  # Required to check out the code.
      id-token: write # Required for OIDC authentication with Azure
    runs-on: ubuntu-latest
    environment: development
    outputs:
      app_url: ${{ steps.deploy.outputs.app_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      - name: Deploy to Azure
        id: deploy
        uses: ./.github/actions/deploy
        with:
          app_name: s115d10-as-searchweb-cs
          azure_client_id: ${{ secrets.AZURE_CLIENT_ID }}
          azure_tenant_id: ${{ secrets.AZURE_TENANT_ID }}
          azure_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

  verify_development:
    needs: deploy_development
    concurrency:
      group: deploy-and-test-dev
    permissions:
      contents: read  # Required to check out the code.
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      - name: Run smoke tests
        uses: ./.github/actions/smoke-test
        with:
          url: ${{ needs.deploy_development.outputs.app_url }}

  ####
  ## Test Environment
  ####
  deploy_test:
    needs: verify_development
    concurrency:
      group: deploy-and-test-test
    permissions:
      contents: read  # Required to check out the code.
      id-token: write # Required for OIDC authentication with Azure
    runs-on: ubuntu-latest
    environment: test
    outputs:
      app_url: ${{ steps.deploy.outputs.app_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      - name: Deploy to Azure
        id: deploy
        uses: ./.github/actions/deploy
        with:
          app_name: s115t02-as-searchweb-cs
          azure_client_id: ${{ secrets.AZURE_CLIENT_ID }}
          azure_tenant_id: ${{ secrets.AZURE_TENANT_ID }}
          azure_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

  verify_test:
    needs: deploy_test
    concurrency:
      group: deploy-and-test-test
    permissions:
      contents: read  # Required to check out the code.
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      - name: Run smoke tests
        uses: ./.github/actions/smoke-test
        with:
          url: ${{ needs.deploy_test.outputs.app_url }}

  publish_github_release:
    needs: [verify_test]
    if: github.ref_type == 'tag'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      - name: Publish GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          generate_release_notes: true
          draft: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  ##  PLACEHOLDERS FOR ADDITIONAL TESTS
  #  integration_test_env_test:
  #    needs: smoke_test_env_test
  #    concurrency:
  #      group: deploy-and-test-test
  #    permissions:
  #      contents: read  # Required to check out the code.
  #    runs-on: ubuntu-latest
  #    environment: test
  #    steps:
  #      - name: Checkout code
  #        uses: actions/checkout@v5
  #      - name: Run integration tests
  #        uses: ./.github/actions/integration-test
  #        with:
  #          app_url: ${{ needs.deploy_env_test.outputs.app_url }}

  #  accessibility_test_env_test:
  #    needs: smoke_test_env_test
  #    concurrency:
  #      group: deploy-and-test-test
  #    permissions:
  #      contents: read  # Required to check out the code.
  #    runs-on: ubuntu-latest
  #    environment: test
  #    steps:
  #      - name: Checkout code
  #        uses: actions/checkout@v5
  #      - name: Run accessibility tests
  #        uses: ./.github/actions/accessibility-test
  #        with:
  #          app_url: ${{ needs.deploy_env_test.outputs.app_url }}

  #  performance_test_env_test:
  #    needs: smoke_test_env_test
  #    concurrency:
  #      group: deploy-and-test-test
  #    permissions:
  #      contents: read  # Required to check out the code.
  #    runs-on: ubuntu-latest
  #    environment: test
  #    steps:
  #      - name: Checkout code
  #        uses: actions/checkout@v5
  #      - name: Run performance tests
  #        uses: ./.github/actions/performance-test
  #        with:
  #          app_url: ${{ needs.deploy_env_test.outputs.app_url }}

  ####
  ## Pre-Production Environment
  ####
  
  deploy_preprod:
    needs: verify_test
    concurrency:
      group: deploy-and-test-preproduction
    permissions:
      contents: read  # Required to check out the code.
      id-token: write # Required for OIDC authentication with Azure
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v'))
    runs-on: ubuntu-latest
    environment: preproduction
    outputs:
      app_url: ${{ steps.deploy.outputs.app_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      - name: Deploy to Azure
        id: deploy
        uses: ./.github/actions/deploy
        with:
          app_name: s115p02-as-searchweb-cs
          azure_client_id: ${{ secrets.AZURE_CLIENT_ID }}
          azure_tenant_id: ${{ secrets.AZURE_TENANT_ID }}
          azure_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

  verify_preprod:
    needs: deploy_preprod
    concurrency:
      group: deploy-and-test-preproduction
    permissions:
      contents: read  # Required to check out the code.
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      - name: Run smoke tests
        uses: ./.github/actions/smoke-test
        with:
          url: ${{ needs.deploy_preprod.outputs.app_url }}

  ##  PLACEHOLDERS FOR ADDITIONAL TESTS
  #  performance_test_env_preproduction:
  #    needs: smoke_test_env_preproduction
  #    concurrency:
  #      group: deploy-and-test-preproduction
  #    permissions:
  #      contents: read  # Required to check out the code.
  #    runs-on: ubuntu-latest
  #    steps:
  #      - name: Checkout code
  #        uses: actions/checkout@v5
  #      - name: Run performance tests
  #        uses: ./.github/actions/performance-test
  #        with:
  #          app_url: ${{ needs.deploy_env_preproduction.outputs.app_url }}

  #  security_test_env_preproduction:
  #    needs: smoke_test_env_preproduction
  #    concurrency:
  #      group: deploy-and-test-preproduction
  #    permissions:
  #      contents: read  # Required to check out the code.
  #    runs-on: ubuntu-latest
  #    steps:
  #      - name: Checkout code
  #        uses: actions/checkout@v5
  #      - name: Run security tests
  #        uses: ./.github/actions/security-test
  #        with:
  #          app_url: ${{ needs.deploy_env_preproduction.outputs.app_url }}

  ####
  ## Production Environment
  ####
  deploy_prod:
    needs: verify_preprod
    concurrency:
      group: deploy-and-test-production
    permissions:
      contents: read  # Required to check out the code.
      id-token: write # Required for OIDC authentication with Azure
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v'))
    runs-on: ubuntu-latest
    environment: production
    outputs:
      app_url: ${{ steps.deploy.outputs.app_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      - name: Deploy to Azure
        id: deploy
        uses: ./.github/actions/deploy
        with:
          app_name: s115p01-as-searchweb-cs
          azure_client_id: ${{ secrets.AZURE_CLIENT_ID }}
          azure_tenant_id: ${{ secrets.AZURE_TENANT_ID }}
          azure_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

  verify_prod:
    needs: deploy_prod
    concurrency:
      group: deploy-and-test-production
    permissions:
      contents: read  # Required to check out the code.
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      - name: Run smoke tests
        uses: ./.github/actions/smoke-test
        with:
          url: ${{ needs.deploy_prod.outputs.app_url }}

##  PLACEHOLDERS FOR ADDITIONAL TESTS
#  security_test_env_production:
#    needs: smoke_test_env_production
#    concurrency:
#      group: deploy-and-test-production
#    permissions:
#      contents: read  # Required to check out the code.
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v5
#      - name: Run security tests
#        uses: ./.github/actions/security-test
#        with:
#          app_url: ${{ needs.deploy_env_production.outputs.app_url }}


name: giap-web-cicd

permissions:
  contents: read  # This is required to checkout the code.
  packages: read  # This is required to access the DfEDigital NuGet feed.
  id-token: write # This is required for OIDC authentication with Azure

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  lint:
    runs-on: ubuntu-latest

    env:
      SOLUTION_DIRECTORY: DfE.GIAP.All

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET SDK from global.json
        uses: actions/setup-dotnet@v4

      - name: Add DfEDigital NuGet Feed
        run: dotnet nuget add source --username USERNAME --password ${{ secrets.GITHUB_TOKEN }} --store-password-in-clear-text --name dfedigital "https://nuget.pkg.github.com/DFE-Digital/index.json"

      - name: Verify formatting
        run: dotnet format --include DfE.GIAP.Core/ DfE.GIAP.Core.UnitTests/ --verify-no-changes
        working-directory: ${{ env.SOLUTION_DIRECTORY }}

  build_test_package:
    runs-on: ubuntu-latest

    env:
      BUILD_CONFIGURATION: Release
      SOLUTION_DIRECTORY: DfE.GIAP.All

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Build
        uses: ./.github/actions/build
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Run unit tests
        run: |
          for proj in \
            ./DfE.GIAP.Common.Tests/DfE.GIAP.Common.Tests.csproj \
            ./DfE.GIAP.Service.Tests/DfE.GIAP.Service.Tests.csproj \
            ./DfE.GIAP.Web.Tests/DfE.GIAP.Web.Tests.csproj \
            ./DfE.GIAP.Core.UnitTests/DfE.GIAP.Core.UnitTests.csproj
          do
            echo "Running tests for $proj"
            dotnet test "$proj" \
              --verbosity normal \
              --collect:"XPlat Code Coverage" \
              -p:CoverletOutputFormat=cobertura \
              -p:CoverletOutput=./TestResults/
          done
        working-directory: ${{ env.SOLUTION_DIRECTORY }}

      - name: Install ReportGenerator tool
        run: dotnet tool install --tool-path ./tools dotnet-reportgenerator-globaltool --version 4.5.8
        working-directory: ${{ env.SOLUTION_DIRECTORY }}

      - name: Generate test coverage reports
        run: ./tools/reportgenerator "-reports:**/coverage.cobertura.xml" "-targetdir:./coverlet/reports" "-reporttypes:Cobertura" "-assemblyfilters:-DfE.GIAP.Web.Views;-DfE.GIAP.Service.Tests"
        working-directory: ${{ env.SOLUTION_DIRECTORY }}

      - name: Upload test coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: ${{ env.SOLUTION_DIRECTORY }}/coverlet/reports/Cobertura.xml

      - name: Summarise code coverage
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: ${{ env.SOLUTION_DIRECTORY }}/coverlet/reports/Cobertura.xml
          badge: true
          fail_below_min: true
          format: markdown
          hide_branch_rate: false
          hide_complexity: true
          indicators: true
          output: both
          thresholds: '60 80'

      - name: Run gulp
        run: |
          npm install -g gulp
          gulp default --gulpfile DfE.GIAP.Web/gulpfile.js --cwd DfE.GIAP.Web
        working-directory: ${{ env.SOLUTION_DIRECTORY }}

      - name: Publish application
        run: dotnet publish DfE.GIAP.Web/DfE.GIAP.Web.csproj --configuration ${{ env.BUILD_CONFIGURATION }} --output ${{ github.workspace }}/publish
        working-directory: ${{ env.SOLUTION_DIRECTORY }}

      - name: Verify publish output
        run: ls -hal ${{ github.workspace }}/publish

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: packaged_app_for_deployment
          path: publish
          if-no-files-found: error

  local_integration_tests:
    runs-on: ubuntu-latest
#    needs: build_test_package
    services:
      cosmosdb:
        image: mcr.microsoft.com/cosmosdb/linux/azure-cosmos-emulator:latest
        ports:
          - 8081:8081
          - 10250-10255:10250-10255
        env:
          AZURE_COSMOS_EMULATOR_PARTITION_COUNT: 5
          AZURE_COSMOS_EMULATOR_ENABLE_DATA_PERSISTENCE: true

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build
        uses: ./.github/actions/build
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install CosmosDb Emulator TLS certificate
        run: |
          retry_count=0
          max_retry_count=10
          until sudo curl --insecure --silent --fail --show-error "https://localhost:8081/_explorer/emulator.pem" --output "/usr/local/share/ca-certificates/cosmos-db-emulator.crt"; do
            if [ $retry_count -eq $max_retry_count ]; then
              echo "Failed to download certificate after $retry_count attempts."
              exit 1
            fi
            echo "Failed to download certificate. Retrying in 5 seconds..."
            sleep 5
            retry_count=$((retry_count+1))
          done
          sudo update-ca-certificates

      - name: Run Integration Tests
        run: dotnet test ./DfE.GIAP.All/DfE.GIAP.Core.IntegrationTests/DfE.GIAP.Core.IntegrationTests.csproj --no-build --verbosity normal

  deploy_dev_poc:
    uses: ./.github/workflows/deploy.yml
    needs: [build_test_package, lint, local_integration_tests]
#    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    with:
      environment: development-poc
      ## Temporary POC on Azure
      app_name: giap-deploy-demo-development
    secrets:
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

  smoke_test_dev_poc:
    uses: ./.github/workflows/smoke-test.yml
    needs: deploy_dev_poc
#    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    with:
      environment: development-poc
      app_url: ${{ needs.deploy_dev_poc.outputs.app_url }}

#  deploy_dev:
#    uses: ./.github/workflows/deploy.yml
#    needs: [build_test_package, lint, local_integration_tests]
#    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
#    with:
#      environment: development
#      ## Temporary POC on CIP
#      app_name: s115d10-s115d10-as-searchweb-cs-gha-poc
#    secrets:
#      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
#      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
#      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
#
#  smoke_test_dev:
#    uses: ./.github/workflows/smoke-test.yml
#    needs: deploy_dev
#    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
#    with:
#      environment: development
#      app_url: ${{ needs.deploy_dev.outputs.app_url }}
#
#  deploy_test:
#    uses: ./.github/workflows/deploy.yml
#    needs: smoke_test_dev
#    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
#    with:
#      environment: test
#      app_name: s115t02-as-searchweb-cs
#    secrets:
#      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
#      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
#      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
#
#  smoke_test_test:
#    uses: ./.github/workflows/smoke-test.yml
#    needs: deploy_test
#    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
#    with:
#      environment: test
#      app_url: ${{ needs.deploy_test.outputs.app_url }}
#
###  PLACEHOLDERS FOR ADDITIONAL TESTS
##  integration_test_test:
##    uses: ./.github/workflows/integration-test.yml
##    needs: smoke_test_dev
##    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
##    with:
##      environment: test
##      app_url: ${{ needs.deploy_dev.outputs.app_url }}
##
##  accessibilty_test_test:
##    uses: ./.github/workflows/accessibility-test.yml
##    needs: smoke_test_dev
##    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
##    with:
##      environment: test
##      app_url: ${{ needs.deploy_dev.outputs.app_url }}
##
#  deploy_preproduction:
#    uses: ./.github/workflows/deploy.yml
##    needs: [smoke_test_test, integration_test_test, accessibilty_test_test]
#    needs: [smoke_test_test]
#    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
#    with:
#      environment: preproduction
#      app_name: s115p02-as-searchweb-cs
#    secrets:
#      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
#      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
#      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
#
#  smoke_test_preproduction:
#    uses: ./.github/workflows/smoke-test.yml
#    needs: deploy_preproduction
#    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
#    with:
#      environment: preproduction
#      app_url: ${{ needs.deploy_preproduction.outputs.app_url }}
#
###  PLACEHOLDERS FOR ADDITIONAL TESTS
##  performance_test_preproduction:
##    uses: ./.github/workflows/performance-test.yml
##    needs: smoke_test_dev
##    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
##    with:
##      environment: preproduction
##      app_url: ${{ needs.deploy_dev.outputs.app_url }}
#
#  deploy_prod:
#    uses: ./.github/workflows/deploy.yml
#    needs: smoke_test_preproduction
##    needs: [smoke_test_preproduction, performance_test_preproduction]
#    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
#    with:
#      environment: production
#      app_name: s115p01-as-searchweb-cs
#    secrets:
#      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
#      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
#      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
#
#  smoke_test_prod:
#    uses: ./.github/workflows/smoke-test.yml
#    needs: deploy_prod
#    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
#    with:
#      environment: production
#      app_url: ${{ needs.deploy_prod.outputs.app_url }}

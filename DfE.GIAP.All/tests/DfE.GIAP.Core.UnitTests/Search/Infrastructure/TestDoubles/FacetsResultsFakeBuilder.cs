using Azure.Search.Documents.Models;

namespace DfE.GIAP.Core.UnitTests.Search.Infrastructure.TestDoubles;

/// <summary>
/// Provides a fluent builder for generating fake facet results used in unit tests.
/// Supports deterministic and randomized facet generation to simulate Azure Search responses.
/// Enables symbolic traceability and onboarding clarity for test scenarios involving facet logic.
/// </summary>
internal class FacetsResultsFakeBuilder
{
    // Internal store for generated facet results keyed by facet name
    private readonly Dictionary<string, IList<FacetResult>> _facets = [];

    // Faker instance for generating randomized values
    private readonly Bogus.Faker _faker = new();

    /// <summary>
    /// Adds a predefined "EducationPhase" facet with static values.
    /// Useful for testing known facet mappings and downstream transformations.
    /// </summary>
    public FacetsResultsFakeBuilder WithEducationPhaseFacet()
    {
        string[] values = ["ForenameLC", "SurnameLC", "Gender"];
        AddFacet("EducationPhase", values);
        return this;
    }

    /// <summary>
    /// Adds a random number of auto-generated facets with randomized names and values.
    /// Simulates dynamic facet structures returned by Azure Search.
    /// </summary>
    public FacetsResultsFakeBuilder WithAutoGeneratedFacets()
    {
        int facetsCount = _faker.Random.Int(1, 10);
        for (int i = 0; i < facetsCount; i++)
        {
            WithAutoGeneratedFacet(i.ToString());
        }
        return this;
    }

    /// <summary>
    /// Adds a single auto-generated facet with a randomized name and job title values.
    /// Supports symbolic variation by appending a suffix to the facet name.
    /// </summary>
    public FacetsResultsFakeBuilder WithAutoGeneratedFacet(string? appendFacetName = null)
    {
        int facetValuesCount = _faker.Random.Int(1, 10);
        List<string> values =
            [.. Enumerable.Range(0, facetValuesCount).Select(_ => _faker.Name.JobTitle())];

        string facetName = _faker.Name.JobType() + appendFacetName;
        AddFacet(facetName, values);
        return this;
    }

    /// <summary>
    /// Adds a custom facet using the provided list of values.
    /// Useful for injecting specific test parameters or edge cases.
    /// </summary>
    public FacetsResultsFakeBuilder WithFacet(List<object> facetParams)
    {
        string facetName = _faker.Name.JobType();
        AddFacet(facetName, facetParams);
        return this;
    }

    /// <summary>
    /// Finalizes and returns the constructed facet dictionary.
    /// Throws if no facets have been added to ensure test integrity.
    /// </summary>
    public Dictionary<string, IList<FacetResult>> Create()
    {
        if (_facets.Count == 0)
        {
            throw new NullReferenceException("Facet fake has no facets set");
        }
        return _facets;
    }

    /// <summary>
    /// Helper method to construct and add facet results to the internal dictionary.
    /// Wraps each value in a FacetResult with randomized count metadata.
    /// </summary>
    private void AddFacet(string facetName, IEnumerable<object> values)
    {
        int count = _faker.Random.Int(1, 50);
        List<FacetResult> facetResults =
            [.. values.Select(value =>
                SearchModelFactory.FacetResult(
                    count,
                    new Dictionary<string, object> { ["value"] = value }))];

        _facets[facetName] = facetResults;
    }
}

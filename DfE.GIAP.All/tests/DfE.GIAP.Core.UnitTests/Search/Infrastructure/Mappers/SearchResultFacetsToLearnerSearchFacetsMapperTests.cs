using DfE.GIAP.Core.Search.Application.Models.Search;
using DfE.GIAP.Core.Search.Infrastructure.Mappers;
using DfE.GIAP.Core.UnitTests.Search.Infrastructure.TestDoubles;
using FluentAssertions;
using AzureFacetResult = Azure.Search.Documents.Models.FacetResult;

namespace DfE.GIAP.Core.UnitTests.Search.Infrastructure.Mappers;

public sealed class SearchResultFacetsToLearnerSearchFacetsMapperTests
{
    AzureFacetResultToEstablishmentFacetsMapper _facetResultToFacetMapper = new();

    [Fact]
    public void Map_WithStringFacetResults_ReturnsFacets()
    {
        // arrange
        Dictionary<string, IList<AzureFacetResult>> azureFacetsResults =
            new FacetsResultsFakeBuilder()
                .WithEducationPhaseFacet()
                .WithAutoGeneratedFacet()
                .Create();

        // act
        SearchFacets mappedResult =
            _facetResultToFacetMapper.Map(azureFacetsResults);

        // assert
        mappedResult.Should().NotBeNull();
        mappedResult.Facets.Should().NotBeNullOrEmpty();

        foreach ((string facetName, IList<AzureFacetResult> expectedFacetValues) in azureFacetsResults)
        {
            // Validate facet presence and result population
            SearchFacet mappedFacet =
                mappedResult.Facets.Single(searchFacet =>
                    searchFacet.Name == facetName);

            mappedFacet.Should().NotBeNull();
            mappedFacet.Results.Should().NotBeNullOrEmpty();

            // Validate each expected facet value is mapped correctly
            foreach (AzureFacetResult expectedValue in expectedFacetValues)
            {
                FacetResult mappedValue =
                    mappedFacet.Results.Single(facetResult =>
                    facetResult.Value == expectedValue.Value.ToString());

                mappedValue.Should().NotBeNull();
                mappedValue.Count.Should().Be(expectedValue.Count);
            }
        }
    }

    [Fact]
    public void Map_WithNonStringFacetResults_ThrowsInvalidCastException()
    {
        // arrange
        Dictionary<string, IList<AzureFacetResult>> azureFacetsResults =
            new FacetsResultsFakeBuilder()
                .WithFacet([true, "string2"])
                .Create();

        // act, assert
        Action failedAction =
            () => _facetResultToFacetMapper.Map(azureFacetsResults);

        InvalidCastException exception =
            Assert.Throws<InvalidCastException>(failedAction);

        exception.Message.Should().Be(
            "Unable to cast object of type 'System.Boolean' to type 'System.String'.");
    }
}
